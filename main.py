import telebot
from telebot import types
import time
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


def safe_mention(user):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = escape_markdown(user.first_name)
    if user.last_name:
        name += ' ' + escape_markdown(user.last_name)

    if user.username:
        return f"@{user.username}"
    else:
        return f"[{name}](tg://user?id={user.id})"


@bot.message_handler(commands=['call'])
def call_all_members(message):
    if message.chat.type not in ['group', 'supergroup']:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    try:
        chat_id = message.chat.id
        admins = bot.get_chat_administrators(chat_id)
        members = [admin.user for admin in admins if not admin.user.is_bot]

        if not members:
            bot.reply_to(message, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return

        mentions = []
        for member in members:
            try:
                mentions.append(safe_mention(member))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {member.id}: {e}")

        if not mentions:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        max_per_message = 5
        for i in range(0, len(mentions), max_per_message):
            batch = mentions[i:i + max_per_message]
            try:
                # –¢–µ–∫—Å—Ç –±–µ–∑ Markdown, —Ç–∞–∫ –∫–∞–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã
                mention_text = "üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! " + " ".join(batch)
                bot.send_message(
                    chat_id,
                    mention_text,
                    parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –æ–±—Ä–∞–±–æ—Ç–∫—É
                    disable_notification=True
                )
                time.sleep(1)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    plain_text = "üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! " + " ".join(
                        f"@{m[1:]}" if m.startswith('@') else m.split(']')[0][1:]
                        for m in batch
                    )
                    bot.send_message(
                        chat_id,
                        plain_text,
                        disable_notification=True
                    )
                except Exception as e2:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e2}")

    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


@bot.message_handler(commands=['help', 'start'])
def send_help(message):
    help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã

–ö–æ–º–∞–Ω–¥—ã:
/call - –í—ã–∑–≤–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ë–æ—Ç–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!
"""
    bot.reply_to(message, help_text, parse_mode=None)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()